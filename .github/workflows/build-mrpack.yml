name: Build Modrinth Pack

on:
  # Löst den Workflow bei Pushes oder Pull Requests auf dem 'main'-Branch aus.
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Ermöglicht das manuelle Starten des Workflows über die GitHub-Benutzeroberfläche.
  workflow_dispatch:

jobs:
  build:
    # Führt den Workflow auf einem Ubuntu-Runner aus.
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout des Repositorys
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Go-Umgebung einrichten (notwendig zum Kompilieren von packwiz)
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        # Verwende eine stabile Go-Version
        go-version: '1.22'

    # 3. packwiz aus dem Quellcode kompilieren
    - name: Compile packwiz
      run: |
        # Klonen des packwiz Repositories.
        git clone https://github.com/packwiz/packwiz.git packwiz_repo
        # Wechseln in das Repository-Verzeichnis.
        cd packwiz_repo
        
        # Kompilieren von packwiz. Wir verwenden einen korrekten Pfad, um das Binary zu bauen.
        # Der Befehl go build . erstellt das Binary aus dem aktuellen Verzeichnis
        go build -o ../packwiz .
        
        # Zurück ins Hauptverzeichnis.
        cd ..

    # 4. packwiz ausführbar machen
    - name: Make packwiz executable
      run: chmod +x packwiz

    # 5. packwiz-Struktur initialisieren und Mods hinzufügen
    - name: Initialize packwiz and add mods
      run: |
        # Installiere 'jq' zum Parsen von JSON
        sudo apt-get update
        sudo apt-get install jq -y
        
        # Initialisiere ein neues packwiz-Projekt nicht-interaktiv mit allen notwendigen Parametern
        # Wir verwenden 'fabric' basierend auf den Mod-Dateien in deiner modrinth.index.json
        ./packwiz init --name "Heuli Modpack Ullrichmon" --mc-version "1.21.1" --fabric-version "0.16.10" --author VollmondHeuler --version "1.0.0" --fabric-latest

        # Extrahiere die Modrinth Project IDs aus den Download-URLs und füge sie zu packwiz hinzu
        jq -r '.files[] | .downloads[]' modrinth.index.json | grep -oP 'https://cdn.modrinth.com/data/\K[^/]+' | while read MOD_ID; do
          if [ -n "$MOD_ID" ]; then
            echo "Adding mod: $MOD_ID"
            # Füge die Mod mit '-y' hinzu, um Abhängigkeiten automatisch zu bestätigen
            ./packwiz modrinth add -y "$MOD_ID"
          fi
        done
        
        # Aktualisiere die packwiz-Struktur und überschreibe den Index (-r)
        # Dies ist entscheidend, um sicherzustellen, dass index.toml korrekt generiert wird.
        ./packwiz index -r

    # 6. Modrinth Pack (.mrpack) bauen
    - name: Build Modrinth pack (.mrpack)
      run: |
        ./packwiz modrinth export

    # 6. Dateinamen des gebauten .mrpack finden
    - name: Find mrpack file name
      id: find_mrpack
      run: |
        # Nutze find, um nach der .mrpack-Datei zu suchen. 
        # Da der Dateiname Leerzeichen enthält, wird er als eine Zeile ausgegeben.
        MRPACK_FILE=$(find . -name "*.mrpack" -print -quit)

        # Gib den gefundenen Pfad als Output-Variable aus
        echo "mrpack_file=$MRPACK_FILE" >> $GITHUB_OUTPUT

    # 7. Hochladen des .mrpack als GitHub-Artefakt
    - name: Upload .mrpack artifact
      uses: actions/upload-artifact@v4
      with:
        name: modrinth-pack
        # Verwendet den im vorherigen Schritt gefundenen Dateipfad.
        path: ${{ steps.find_mrpack.outputs.mrpack_file }}