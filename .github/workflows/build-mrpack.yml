name: Build Modrinth Pack

on:
  # Löst den Workflow bei Pushes oder Pull Requests auf dem 'main'-Branch aus.
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Ermöglicht das manuelle Starten des Workflows über die GitHub-Benutzeroberfläche.
  workflow_dispatch:

jobs:
  build:
    # Führt den Workflow auf einem Ubuntu-Runner aus.
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout des Repositorys
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Go-Umgebung einrichten (notwendig zum Kompilieren von packwiz)
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        # Verwende eine stabile Go-Version
        go-version: '1.22'

    # 3. packwiz aus dem Quellcode kompilieren
    - name: Compile packwiz
      run: |
        # Klonen des packwiz Repositories.
        git clone https://github.com/packwiz/packwiz.git packwiz_repo
        # Wechseln in das Repository-Verzeichnis.
        cd packwiz_repo
        
        # Kompilieren von packwiz. Wir verwenden einen korrekten Pfad, um das Binary zu bauen.
        # Der Befehl go build . erstellt das Binary aus dem aktuellen Verzeichnis
        go build -o ../packwiz .
        
        # Zurück ins Hauptverzeichnis.
        cd ..

    # 4. packwiz ausführbar machen
    - name: Make packwiz executable
      run: chmod +x packwiz

    # 5. Modrinth Pack (.mrpack) bauen
    - name: Build Modrinth pack (.mrpack)
      # Führt den packwiz Export-Befehl aus.
      # Stelle sicher, dass deine packwiz-Konfiguration (.packwiz Ordner, pack.toml) im Repo liegt.
      run: |
        ./packwiz modrinth export

    # 6. Dateinamen des gebauten .mrpack finden
    - name: Find mrpack file name
      id: find_mrpack
      run: |
        # Sucht nach der .mrpack-Datei, die vom Export-Befehl erstellt wurde.
        MRPACK_FILE=$(find . -name "*.mrpack")
        # Speichert den gefundenen Dateinamen als Output für den nächsten Schritt.
        echo "mrpack_file=$MRPACK_OUTPUT" >> $GITHUB_OUTPUT

    # 7. Hochladen des .mrpack als GitHub-Artefakt
    - name: Upload .mrpack artifact
      uses: actions/upload-artifact@v4
      with:
        name: modrinth-pack
        # Verwendet den im vorherigen Schritt gefundenen Dateipfad.
        path: ${{ steps.find_mrpack.outputs.mrpack_file }}